name: GSC ci-cd pipeline

on:
  push:
    branches:
      - main

jobs:
  Testing_Frontend:
    name: Testing the frontend
    runs-on: ubuntu-latest
    container:
      image: node:23-alpine3.19
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Install the frontend dependcies
        run: |
          cd frontend
          npm ci
      - name: Running the frontend tests
        run: |
          cd frontend
          npm run test 

  Testing_API:
    name: Testing the apis
    runs-on: ubuntu-latest
    container:
      image: node:23-alpine3.19
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Install the api dependcies
        run: |
          cd api
          npm ci
      - name: Running the api tests
        env:
          JWT_SECRET_ACCESS_KEY: 'Testjwtsecretaccessvalue'
          JWT_REFRESH_TOKEN_SECRET: 'testjwtrefreshtokensecretvalue'
        run: |
          cd api
          npm run test 

  Testing_Docker_Build:
    name: Testing the docker build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Create test certs
        run: |
          mkdir ./frontend/nginx/certs
          echo "this is test certs" >> testcert.txt
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build app
        run: docker compose -f ./docker-compose.yml up
      - name: Remove app
        run: docker compose -f ./docker-compose.yml down --rmi all
  
  Deploying_On_VM:
    name: Deploying on vm
    runs-on: ubuntu-latest
    needs:
      - Testing_Docker_Build
      - Testing_API
      - Testing_Frontend
    steps:
      - name: Add SSH keys
        run: |
          echo "${{ secrets.VM_KEY }}" > ssh_key
          chmod 600 ssh_key
      - name: Deploy updates
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} << 'EOF'
          cd goldScreenCinema
          git pull origin main
          docker compose down --rmi all
          docker compose up -d
          EOF
